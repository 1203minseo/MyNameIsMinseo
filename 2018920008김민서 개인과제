# 클라이언트
## 정의
- 네트워크를 통하여 서버라는 다른 컴퓨터 시스템 상의 원격 서비스에 접속할 수 있는 응용 프로그램이나 서비스

## 클라이언트의 종류
- 안드로이드
- IOS

### IOS와 안드로이드 차이점
1. 개인정보
 - IOS : 보다 적은 데이터를 수집하여 클라우드에 저장하고, 더 많은 정보를 고객들의 기기에 직접 저장한다. 개인정보들은 상당수 암호화되어 익명성이 보장된다. 이를 통해 다양한 기기관련 서비스(EX.내 아이폰 찾기)를 제공한다. 이를 Differential Privacy라고 하는데, 이 때문에 개개인의 정보를 하나하나 식별할 수 없다.
 - 안드로이드 : 가능한 많은 개인정보를 수집하고 개별적인 정보를 하나하나 관찰할 수 있다. 개개인의 정보를 기반으로 더 나은 서비스를 제공할 수 있다.
> 개인정보 수집 측면에서는 안드로이드를 사용할 때 더 많은 정보를 얻을 수 있어 운영에 유리할것이다.

2. 보안
 - IOS : 개발자가 개인 정보에 접근하는것이 엄격히 통제된다. -> 바이러스나 말웨어를 통해서 접근할 수 있는 정보가 상대적으로 제한됨. 등록된 앱을 자동으로 점검하여 즉시 조치가능.
 - 안드로이드 : 개발자가 생태계에서 접근할 수 있는 권한이 더 많다. 안드로이드 기기가 IOS기기보다 훨씬 많다. 업데이트가 아직 되지않은 어플리케이션이 IOS보다 훨씬 많다.
> 보안 측면에서는 IOS가 더 뛰어나다. 안드로이드는 제 3자인 개발자가 고객의 개인 정보에 더 많이 접근할 수 있어 보안에 더 취약하다고 한다. 하지만 현재 안드로이드도 보안 측면에서 개선되고 있으며 과거에 비해 위험한 어플리케이션이 0.05%로 줄었다는것으로 보면 제 3자인 개발자 입장에서는 안드로이드를 사용하여 개발하는것이 더 유리하다고 생각한다.

3. 어플리케이션
 - IOS : 2. 보안에서 말했듯이 개발자는 IOS에서 개인 정보에 접근하는것이 엄격히 통제된다. 단, IOS는 안드로이드에 비해 더 중앙집중적이기 때문에 더 안정적이다. 또한, IOS와 안드로이드에서의 앱의 숫자는 거의 똑같지만, 회사 차원의 최신 어플리케이션의 경우에는 IOS에서 먼저 배포되는경우가 상당하다.
 - 안드로이드 : 개발자들이 기기에 접근할 수 잇는 기능이 더 넓고 깊다(카메라, 연락처 등등). 또한, 유저들은 이미지나 UI를 픽셀단위로 수정 가능하다. 대표적으로, 안드로이드에서는 사용자가 무슨 앱을 사용하고, 얼마나 썻는지를 트렉킹 하는 앱이 존재하며 WIFI 사용량에 대한 자세한 정보도 안드로이드에만 있는 경우가 상당하다. 또한, 안드로이드에서는 SMS, 배터리 레벨, 전화 패턴, 블루투스 연결 품질, WIFI 연결 품질 등을 작동할 수 있는 앱이 있다.
 > 두 OS를 비교해보면 안드로이드가 IOS보다 우위에 있는것같다.

#### 개발자 측면에서 봤을 때 안드로이드를 사용하는것이 더 좋음.

## 클라이언트 프로그래밍 언어의 종류
- 팻
  - 리치 클라이언트(rich client), 씩 클라이언트(thick client)라고도 하며 스스로 다량의 데이터를 처리하는 클라이언트로 서버에 꼭 의지하지는 않는다. 팻 클라이언트는 개인용 컴퓨터의 한 형태로 가장 흔하게 쓰이며 개인용 컴퓨터나 노트북 컴퓨터는 독립적으로 수행한다.
  - 종류 : 델파이, 닷넷 프레임워크, 자바, 비주얼 스튜디오
- 씬
  -  최소한의 클라이언트로, 호스트 컴퓨터의 리소스를 사용한다. 다량의 데이터를 처리하는 애플리케이션 서버가 제공한 사진을 그래픽으로 보여 주는 것이 임무이다.
  - 종류: 자바스크립트/AJAX (클라이언트 측면 자동화), ASP, JSP, 루비 온 레일스, 파이썬의 Django, PHP 등을 포함한다.
- 하이브리드
  - 팻 클라이언트와 씬 클라이언트가 합쳐놓은 듯함. 팻 클라이언트와 비슷하게 로컬로 처리하지만 데이터 보관을 위한 서버에 의지한다. 멀티미디어 지원과 고성능을 위한 팻 클라이언트와 뛰어난 관리 능력과 유연성을 위한 씬 클라이언트의 장점을 제공한다.

# 서버
## 정의
클라이언트에게 네트워크를 통해 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말한다. 특히, 서버에서 동작하는 소프트웨어를 서버 소프트웨어라 한다. 주로 리눅스 등의 운영 체제를 설치한 대형 컴퓨터를 쓰지만, 그렇지 않은 경우도 있다.

## 종류
- 애플리케이션 서버
- 컴퓨팅 서버
- 데이터베이스 서버
- 파일 서버
- 게임 서버
- 프록시 서버
- 웹 서버

## 서버 운영 체제
- 서버 운영 체제로 FreeBSD, 솔라리스, 리눅스 등이 있다. 유닉스는 본래 미니컴퓨터 운영 체제였으며 전통적인 미니컴퓨터를 서버가 대체해감에 따라 서버는 효율적인 유닉스 기반의 운영 체제가 되었다.

## 리눅스
- 공개 운영체제이다.
- 배포판이 다양하다.
- 플랫폼이 다양하다.
- 소스 코드가 공개되어 있기 때문에 원칙적으로 CPU가 딸린 어떤 기계에서도 돌릴 수 있다. 일반적으로 생각하는 PC용 운영체제 말고도 임베디드 시스템에 리눅스 커널을 얹어서 돌리는 경우도 많다.

## 정의
- 중복이 없게 정보를 일원화하여 처리를 효율적으로 수행하기 위해서 서로 관련성을 가지며 중복이 없는 데이터의 집합을 유지하는 것

>데이터베이스는 1. 관리자가 데이터에 실시간으로 접근 가능해야하며 2. 계속적으로 진화하고 3. 여러 사용자가 동시적으로 데이터를 공유하며 4. 응용프로그램과 데이터베이스가 독립되어야한다.

## 데이터베이스 관리 시스템
- 오라클(관계 DBMS)
  - 엔터프라이즈 에디션
    - 윈도우와 유닉스/리눅스 등 대부분의 운영체제를 지원한다.
    - 대규모의 데이터베이스 시스템을 개발하기 위해 고성능, 확장성, 보안 및 신뢰성 등을 요구하는 기업 환경에 적합하며, 포괄적이고 광범위한 기능을 제공한다.
  - 스탠다드 에디션
    - 소켓이 최대 4개인 서버를 위한 핵심 관리 기능을 제공하며, 윈도우와 유닉스/리눅스 등 대부분의 운영체제를 지원한다.
    - 엔터프라이즈 에디션보다 사용자가 적은 소규모 조직에 적합하다.
  - 개인용 에디션
    - 윈도우 운영체제를 지원하는 단일 사용자 개발 환경에 적합하여 응용 프로그램 개발자들이 주로 사용한다.
- MYSQL(관계 DBMS)
  - 매우 빠르고 유연하며 사용하기가 쉽다.
  - 다중 사용자, 다중 스레드를 지원하고, C, C++, 에펠, 자바, 펄, PHP, 파이썬 스크립트 등을 위한 응용 프로그램 인터페이스를 제공한다
  - 유닉스나 리눅스, 윈도우 운영체제에서 사용할 수 있다.
  - 오픈소스로 개발되는 무료 프로그램이어서 홈 페이지나 쇼핑몰 등 일반적인 웹 개발에 널리 이용된다.
- MariaDB(관계 DBMS)
  - 오픈소스의 관계형 데이터베이스 관리시스템이다.
  - MYSQL과 동일한 소스코드를 기반으로한다.
  - 마리아DB는 MySQL과 소스코드를 같이 하므로 사용방법과 구조가 MySQL과 동일하다.
  - 마리아DB 커뮤니티는 MySQL과 비교해 애플리케이션 부분 속도가 약 4~5천배 정도 빠르며, MySQL이 가지고 있는 모든 제품의 기능을 완벽히 구현하면서도 성능 면에서는 최고 70%의 향상을 보이고 있다고 주장한다.

> 데이터베이스 관리 시스템(DBMS)를 3개정도 찾아 보았다. MariaDB의 경우 MYSQL의 진화형(?)이라고 생각한다면 둘 중 비교하여 MariaDB를 쓸것같다. 하지만 ORACLE의 경우 계속적인 업데이트와 대부분의 운영체제를 지원한다는 점에서 더 장점이 있다. 또한 데이터의 양은 매우 크기 때문에 대규모의 데이터베이스 시스템과 그에 적합한 성능, 확장성, 보안 및 신뢰성이 필요하므로 ORACLE의 사용이 가장 적절하다.

# 캐시
## 정의
- 주기억 장치에 읽어들인 명령이나 프로그램들로 채워지는 버퍼 형태의 고속 기억 장치. 주기억 장치와 중앙 처리 장치와의 사이에 설치되어 있는 고속 버퍼메모리이다.
- 기억 용량은 적지만 주기억 장치에 비해 고속이며 액세스할 수 있는 장점이 있다.
- 자주 액세스하는 데이터나 프로그램 명령을 반복해서 검색하지 않고도 즉각 사용할 수 있도록 저장해두는 영역이다.

## 관련 기술
- 하둡
  - 여러 개의 저렴한 컴퓨터를 마치 하나인 것처럼 묶어 대용량 데이터를 처리하는 기술
  - 하둡은 수천대의 분산된 x86 장비에 대용량 파일을 저장할 수 있는 기능을 제공한다.
  - 기존의 슈퍼컴퓨터를 사용할 때 보다 값이 싸고 성능이 좋다.  빅데이터 분석에 들어가는 초기 비용을 줄이면서 자사 데이터 시스템과의 호환 문제도 손쉽게 해결할 수 있다.
> 데이터베이스 관리 시스템의 경우 데이터베이스가 실시간으로 접근 가능하여 수정이 가능해야 한다. 이를 위해서는 하둡을 이용하여 실시간 수정이 가능하며 값이 싸고 저장공간이 매우 풍부한 기술이 중요하다고 생각했다.
